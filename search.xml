<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TCP的三次握手与四次挥手</title>
      <link href="/2025/05/23/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2025/05/23/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、三次握手"><a href="#一、三次握手" class="headerlink" title="一、三次握手"></a>一、三次握手</h2><h3 id="第一次：SYN（同步请求）"><a href="#第一次：SYN（同步请求）" class="headerlink" title="第一次：SYN（同步请求）"></a>第一次：SYN（同步请求）</h3><p>​·  客户端发送带有SYN标志位（SYN&#x3D;）的报文，并随机生成一个初始序列号。</p><p>​·  告知服务器希望建立连接，并提供初始序列号用于后续数据顺序校验。</p><h3 id="第二次：SYN-ACK（同步确认）"><a href="#第二次：SYN-ACK（同步确认）" class="headerlink" title="第二次：SYN-ACK（同步确认）"></a>第二次：SYN-ACK（同步确认）</h3><p>​·  服务器收到SYN报文后，记录客户端的初始序列号（ISN_C），回复SYN-ACK报文（SYN&#x3D;1,ACK&#x3D;1）。</p><p>​·  SYN-ACK报文包含自己的初始序列号（ISN_S）和确认号（ACK&#x3D;ISN_C+1）.</p><p>​·  表示已收到客户端的SYN，确认客户端的连接请求，同时声明自身的初始序列号。</p><h3 id="第三次：ACK（最终确认）"><a href="#第三次：ACK（最终确认）" class="headerlink" title="第三次：ACK（最终确认）"></a>第三次：ACK（最终确认）</h3><p>​·  客户端收到SYN-ACK报文后发送ACK报文（ACK&#x3D;1），确认号为ISN_S+1。</p><p>​·  客户端确认服务器的响应，双方确认连接可靠。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>​·  交换初始序列号确保数据按需传输；</p><p>​·  验证双方均具备发送与接受信息的能力，确保双向通信。</p><h3 id="为何需要三次？"><a href="#为何需要三次？" class="headerlink" title="为何需要三次？"></a>为何需要三次？</h3><p>​<strong>两次握手：</strong>若在第二次握手后直接分配资源，但客户端未收到SYN-ACK或未响应ACK，服务器资源会被长期占用。</p><p>​<strong>四次握手：</strong>三次已经足够实现功能，第四次交互只会增加延迟。</p><h2 id="二、四次握手"><a href="#二、四次握手" class="headerlink" title="二、四次握手"></a>二、四次握手</h2><h3 id="第一次：FIN"><a href="#第一次：FIN" class="headerlink" title="第一次：FIN"></a>第一次：FIN</h3><p>​·  <strong>客户端</strong>发送FIN报文（FIN&#x3D;1），序列号为seq&#x3D;u，进入FIN_WAIT_1状态，表示不再发送数据，但可接收数据。</p><h3 id="第二次：ACK"><a href="#第二次：ACK" class="headerlink" title="第二次：ACK"></a>第二次：ACK</h3><p>​·  <strong>服务器</strong>收到FIN后，回复ACK报文（ACK&#x3D;1），确认号ack&#x3D;u+1，进入CLOSE_WAIT状态，此时：</p><p>​·  客户端到服务器的连接关闭（单项关闭）；</p><p>​·  服务器可能继续发送未完成的数据。</p><p>​·  客户端收到ACK报文后进入FIN_WAIT_2状态，等待服务器的FIN报文。</p><h3 id="第三次：FIN"><a href="#第三次：FIN" class="headerlink" title="第三次：FIN"></a>第三次：FIN</h3><p>​·  <strong>服务端</strong>处理完数据后发送FIN报文（FIN&#x3D;1,ACK&#x3D;1），序列号seq&#x3D;v，确认号为ack&#x3D;u+1，进入LAST_ACK状态，表示准备关闭连接。</p><h3 id="第四次：ACK"><a href="#第四次：ACK" class="headerlink" title="第四次：ACK"></a>第四次：ACK</h3><p>​·  <strong>客户端</strong>收到FIN后，回复ACK报文（ACK&#x3D;1），确认号ack&#x3D;v+1，进入TIME_WAIT状态，等待一段时间后关闭连接。</p><p>​·  <strong>服务器</strong>收到ACK后立即关闭连接。</p><h3 id="TIME-WAIT状态的作用"><a href="#TIME-WAIT状态的作用" class="headerlink" title="TIME_WAIT状态的作用"></a>TIME_WAIT状态的作用</h3><p>​·  确保最后一个ACK到达被动关闭方。若ACK丢失，被动方会重传FIN，主动方需重新响应。</p><p>​·  防止旧连接的报文干涉新连接。</p><h3 id="为何需要四次挥手"><a href="#为何需要四次挥手" class="headerlink" title="为何需要四次挥手"></a>为何需要四次挥手</h3><p>​TCP每个方向需独立关闭。被动方肯可能在发送ACK后仍有数据发送，因此需将ACK与FIN分开发送，导致四次交互。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从输入URL到出现页面</title>
      <link href="/2025/05/23/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E5%87%BA%E7%8E%B0%E9%A1%B5%E9%9D%A2/"/>
      <url>/2025/05/23/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E5%87%BA%E7%8E%B0%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、解析URL"><a href="#一、解析URL" class="headerlink" title="一、解析URL"></a>一、解析URL</h2><p>​·  浏览器解析输入的URL，检查协议、域名、端口和路径。</p><p>​·  若是非完整URL（如输入baidu.com），浏览器会尝试补全（自动添加https:&#x2F;&#x2F;）。</p><h2 id="二、检查缓存"><a href="#二、检查缓存" class="headerlink" title="二、检查缓存"></a>二、检查缓存</h2><p>​·  浏览器检查HSTS列表，若域名在列表中，自动将HTTP请求升级成HTTPS。</p><p>​·  查看本地缓存是否有该资源的缓存副本，若有效则直接使用。</p><h2 id="三、DNS解析"><a href="#三、DNS解析" class="headerlink" title="三、DNS解析"></a>三、DNS解析</h2><p>​·  每个网址都有对应的ip地址，ip地址有数字组成，不便于记忆，将url地址解析为ip地址的过程就是<strong>DNS解析</strong>。</p><p>​·  DNS就是一个记录着url与其对应的ip地址的数据库。</p><p>​·  将域名转换为ip地址：</p><p>​1.浏览器缓存–&gt;系统缓存（hosts文件）–&gt;路由器缓存–&gt;ISP的DNS服务器。</p><p>​2.若未命中缓存，DNS服务器通过递归查询（如根域名服务器–&gt;顶级域名服务器–&gt;权威域名服务器）。</p><h2 id="四、建立TCP连接"><a href="#四、建立TCP连接" class="headerlink" title="四、建立TCP连接"></a>四、建立TCP连接</h2><p>​·  通过<a href="/2025/05/23/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/">三次握手</a>建立连接</p><p>​·  如果是HTTPS，还需进行TLS握手：</p><p>​1.协商加密套件；</p><p>​2.服务器发送证书（由CA机构签发，验证身份）；</p><p>​3.生成会话秘钥（Session Key）,后续通信加密。</p><h2 id="五、发送HTTP请求"><a href="#五、发送HTTP请求" class="headerlink" title="五、发送HTTP请求"></a>五、发送HTTP请求</h2><p>​·  浏览器发送HTTP请求：</p><p>​·  请求行（&lt;请求方式&gt;&lt;请求URL&gt;&lt;HTTP版本&gt;）</p><p>​·  请求头（如User-Agent、Accept、Cookie）</p><p>​·  请求体（如POST方法的表单数据）</p><p>​·  如果是HTTPS，数据会被TLS加密。</p><h2 id="六、服务器处理请求"><a href="#六、服务器处理请求" class="headerlink" title="六、服务器处理请求"></a>六、服务器处理请求</h2><p>​·  服务器接收请求</p><p>​·  生成响应</p><h2 id="七、接受响应并解析"><a href="#七、接受响应并解析" class="headerlink" title="七、接受响应并解析"></a>七、接受响应并解析</h2><p>​·  浏览器接收响应：</p><p>​·  状态码（2xx成功、3xx重定向、4xx客户端错误、5xx服务端错误）</p><p>​·  响应头（Content-Type、Cache-Control、Set-Cookie等）</p><p>​·  响应体（HTML、CSS、JS等）</p><p>​·  解析HTML</p><h2 id="八、加载子资源"><a href="#八、加载子资源" class="headerlink" title="八、加载子资源"></a>八、加载子资源</h2><p>​·  解析过程发现图片、CSS、JS等资源时，重新触发HTTP请求（可能复用TCP连接）</p><p>​·  现代浏览器会通过预加载扫描器提前下载资源</p><h2 id="九、渲染页面"><a href="#九、渲染页面" class="headerlink" title="九、渲染页面"></a>九、渲染页面</h2><p>​· 布局，绘制，合成</p><h2 id="十、连接关闭"><a href="#十、连接关闭" class="headerlink" title="十、连接关闭"></a>十、连接关闭</h2><p>​·  通过<a href="/2025/05/23/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/">TCP的四次挥手</a>关闭连接</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2025/05/20/%E9%97%AD%E5%8C%85/"/>
      <url>/2025/05/20/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>​当内部函数引用了外部函数的变量，即使外部函数执行完毕，其作用域也不会被销毁，而是被内部函数保留。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>​·   允许函数访问并记住其定义时的词法作用域。</p><p>​·   在定义时确定作用域，而非执行时，内部函数可以访问外部函数的变量、参数和函数。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(++count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();  <span class="comment">// 输出1</span></span><br><span class="line"><span class="title function_">outer</span>();  <span class="comment">// 输出2</span></span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>​1.数据封装私有化：隐藏变量，只通过特定变量接口暴露操作；</p><p>​2.保留函数状态：可用于 计数器、缓存、防抖&#x2F;节流函数；</p><p>​3.模块化开发：结合立即执行函数可以隔离作用域，避免全局污染。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>​有内存泄漏风险：及时解除闭包引用，obj&#x3D;null。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/05/18/hello-world/"/>
      <url>/2025/05/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<ul class=list>    <li>        <a href="https://qinchuid.github.io/">            <span class=img><img  src="/img/xiaodi.jpg"></span>            <div class="name">琴吹滴</div>            <div class="jieshao">不熟</div>        </a>    </li>    <li>        <a href="https://benksih.github.io">            <span class=img><img  src="/img/benksih.jpg"></span>            <div class="name">Benksih</div>            <div class="jieshao">不认识</div>        </a>    </li>    </ul><style>    .list{        list-style: none;    }    .list li{        height: 210px;        width: 140px;        float: left;    }    .list li a:hover{        transform: scale(1.1);        transition: all .3s;        box-shadow: 0 0 10px rgba(0,0,0,.5);        border-radius: 10px;        text-decoration: none;    }    .list li a{        display: flex;        flex-direction: column;        justify-content: center;        align-items: center;                flex-wrap: wrap;    }    .list img{        width: 100px;        height: 100px;    }    .list li .img{        width: 100px;        height: 100px;        border-radius: 50%;        overflow: hidden;    }    .list li .name{        font-size: 18px;        font-weight: 700;        color: rgb(0, 0, 0);    }    .list li .jieshao{        font-size: 14px;        color: rgba(0, 0, 0,.5);    }</style>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>列表</title>
      <link href="/list/index.html"/>
      <url>/list/index.html</url>
      
        <content type="html"><![CDATA[<p>666</p>]]></content>
      
    </entry>
    
    
  
</search>
