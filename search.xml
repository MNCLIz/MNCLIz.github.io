<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TypeScript-下-面向对象</title>
      <link href="/2025/05/31/TypeScript-2/"/>
      <url>/2025/05/31/TypeScript-2/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>​除了继承JS的所有特性外，TS还在编译阶段引入了<strong>类(class)<strong>、</strong>接口(interface)<strong>、</strong>泛型(generics)<strong>等语法糖，使我们更容易以</strong>面向对象</strong>的方式编写代码。</p><h3 id="class-类"><a href="#class-类" class="headerlink" title="class(类)"></a>class(类)</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 默认为public</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>; <span class="comment">// 可用private关键字修饰属性，此时不可直接调用实例的该属性,需要用get方法来获取</span></span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">sex</span>: <span class="built_in">string</span>; <span class="comment">// readonly表示只读属性，不可被修改</span></span><br><span class="line">    <span class="keyword">static</span> <span class="attr">eyeNum</span>: <span class="built_in">number</span> = <span class="number">2</span>; <span class="comment">// 用static关键字定义类属性(静态属性)或类方法，可直接通过类访问</span></span><br><span class="line"><span class="comment">// 构造函数，用来初始化实例属性，在创建对象时会调用</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age,sex</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 方法，获取age属性值</span></span><br><span class="line">    <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;abc&quot;</span>,<span class="number">18</span>,<span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name</span>); <span class="comment">// abc</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">age</span>); <span class="comment">// error</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="title function_">getAge</span>()); <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">eyeNum</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">sex</span>); <span class="comment">// male</span></span><br><span class="line">per.<span class="property">sex</span> = <span class="string">&quot;female&quot;</span>; <span class="comment">// eror</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">sayHi</span>() <span class="comment">// Hi!</span></span><br></pre></td></tr></table></figure><h3 id="extends-继承"><a href="#extends-继承" class="headerlink" title="extends(继承)"></a>extends(继承)</h3><p>​使用<strong>extends</strong>关键字表示继承，格式为 <code>class 子类 extends 父类&#123;&#125;</code>，子类将会拥有父类所有属性与方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>; <span class="comment">// 子类只能通过父类的get方法访问private属性</span></span><br><span class="line">    <span class="title function_">constructer</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>,<span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">animal</span>&#123;</span><br><span class="line">    <span class="attr">weight</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructer</span>(<span class="params">name, age, weight</span>)&#123;</span><br><span class="line">        <span class="comment">// super 表示父类，这里表示执行父类的构造函数</span></span><br><span class="line">        <span class="comment">// 若子类重写了构造函数则必须调用父类的构造函数，即super()</span></span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">weight</span> = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法重写，子类覆盖父类方法</span></span><br><span class="line">    <span class="title function_">satyHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;汪汪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">animal</span>&#123;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;喵喵&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog1 = <span class="keyword">new</span> <span class="title function_">dog</span>(<span class="string">&quot;dog1&quot;</span>,<span class="number">5</span>,<span class="number">15</span>);</span><br><span class="line"><span class="keyword">const</span> cat1 = <span class="keyword">new</span> <span class="title function_">cat</span>(<span class="string">&quot;cat1&quot;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog1.<span class="title function_">getAge</span>()); <span class="comment">// 5</span></span><br><span class="line">dog1.<span class="title function_">sayHi</span>(); <span class="comment">// 汪汪</span></span><br><span class="line">cat1.<span class="title function_">sayHi</span>(); <span class="comment">// 喵喵</span></span><br></pre></td></tr></table></figure><h3 id="abstract-class-抽象类"><a href="#abstract-class-抽象类" class="headerlink" title="abstract class(抽象类)"></a>abstract class(抽象类)</h3><p>​使用<code>abstract</code>关键字修饰class类，使之成为抽象类，抽象类具有以下特征：</p><ul><li>不能用来创建对象，是专门用来被继承的类；</li><li>可以添加抽象方法，使用<code>abstract</code>修饰方法；</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法没有方法体，子类必须对抽象方法进行重写</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">sayHello</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">animal</span> &#123;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wangwang&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog1 = <span class="keyword">new</span> <span class="title function_">dog</span>(<span class="string">&quot;dog1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ani = <span class="keyword">new</span> <span class="title function_">animal</span>(<span class="string">&quot;ani&quot;</span>); <span class="comment">// error</span></span><br><span class="line">dog1.<span class="title function_">sayHello</span>(); <span class="comment">// wangwang</span></span><br></pre></td></tr></table></figure><h3 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface(接口)"></a>interface(接口)</h3><p>​使用<code>interface</code>关键字声明接口，与普通的类型声明类似</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型声明</span></span><br><span class="line"><span class="keyword">type</span> myType = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> myInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">person1</span>: myType =&#123;<span class="attr">name</span>: <span class="string">&quot;aaa&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">person2</span>: myInterface = &#123;<span class="attr">name</span>:<span class="string">&quot;bbb&quot;</span>&#125;;               </span><br></pre></td></tr></table></figure><p>​但类型声明不能重复被声明，接口可以重复声明，两个接口的并集为最终的接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myType = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> myType = &#123;  <span class="comment">// error</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> myInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> myInterface &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">person1</span>: myType =&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;aaa&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">person2</span>: myInterface = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>;</span><br><span class="line">&#125;;       </span><br></pre></td></tr></table></figure><p>​接口可以在定义类型的时候限制类的结构，只定义对象的结构，其中的属性不能有实际的值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> myInter&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>(): <span class="built_in">void</span>; <span class="comment">// 接口中所有方法都是抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义类时可以使类实现一个接口，满足接口的要求</span></span><br><span class="line"><span class="comment">// 该类中必须具有接口的所有属性与方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> <span class="keyword">implements</span> myInter&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructer</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript-上-类型与配置</title>
      <link href="/2025/05/30/TypeScript-1/"/>
      <url>/2025/05/30/TypeScript-1/</url>
      
        <content type="html"><![CDATA[<h2 id="TS是什么"><a href="#TS是什么" class="headerlink" title="TS是什么"></a>TS是什么</h2><ul><li><strong>TypeScript</strong>是一门以JS为基础构建的语言。</li><li>TS是JS的<strong>超集</strong>，所有JS代码均可在TS中运行。</li><li>TS扩展了JS，并添加了类型。</li><li><strong>注意</strong>：TS不能被JS解析器直接执行，需要先编译成JS代码。</li></ul><h2 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>​声明变量时对变量类型进行设置，但即使报错依然会编译成js代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">number</span>;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">a = <span class="string">&quot;666&quot;</span>; <span class="comment">// error，string类型不能赋值给number类型</span></span><br></pre></td></tr></table></figure><p>​如果同时进行声明与赋值，TS可自动对变量进行类型检测：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">a = <span class="literal">true</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>​也可对函数的参数类型与返回值类型进行声明：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="string">&quot;2&quot;</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h4 id="其他类型："><a href="#其他类型：" class="headerlink" title="其他类型："></a>其他类型：</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">any</span> = <span class="number">1</span>; <span class="comment">// any表示任意类型，相当于关闭了TS的类型检测 </span></span><br><span class="line"><span class="keyword">let</span> b; <span class="comment">// 若不指定类型，自动判断为any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="built_in">unknown</span> = <span class="number">1</span>; <span class="comment">// unknown表示未知类型的值，实际上是个类型安全的any</span></span><br><span class="line">str = a; <span class="comment">// any类型的值可以赋值给任何类型的值且不报错</span></span><br><span class="line">str = c; <span class="comment">// error</span></span><br><span class="line"><span class="comment">// 类型断言，用来告诉解析器变量的实际类型</span></span><br><span class="line">str = c <span class="keyword">as</span> <span class="built_in">string</span>; </span><br><span class="line">str = &lt;<span class="built_in">string</span>&gt;c; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>): <span class="built_in">void</span>&#123;&#125; <span class="comment">// void表示空值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>): <span class="built_in">never</span>&#123;&#125; <span class="comment">// never表示永远不会返回结果</span></span><br><span class="line"><span class="comment">// &quot;?&quot;表示可选属性，[propName: string]: any表示可添加其他任意类型的属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>:&#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>?: <span class="built_in">number</span>, [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125; </span><br><span class="line"><span class="comment">// string[],Array&lt;string&gt;表示字符串数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="built_in">string</span>[]; </span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple 元组"></a>Tuple 元组</h3><p>​<strong>tuple元组</strong>是一种长度固定、数据类型可以不相同的数组类型，可读性与语义性强，类型安全，便于维护，性能优化。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> h : [<span class="built_in">string</span>,<span class="built_in">number</span>];</span><br><span class="line">h = [<span class="string">&quot;abc&quot;</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="Enum-枚举"><a href="#Enum-枚举" class="headerlink" title="Enum 枚举"></a>Enum 枚举</h3><p>​<strong>enum枚举</strong>是一种定义一组命名变量的方式。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span>&#123;</span><br><span class="line">    male, <span class="comment">// 默认为0</span></span><br><span class="line">    female <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>,<span class="attr">gender</span>: <span class="title class_">Gender</span>&#125;;</span><br><span class="line">person = &#123;<span class="attr">name</span>:<span class="string">&quot;abc&quot;</span>, <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">male</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Gender</span>.<span class="property">male</span>) <span class="comment">// 输出0</span></span><br></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>​当类型需要重复使用时，可以为其起个别名，使用别名代替类型名来简化类型的使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: myType;</span><br></pre></td></tr></table></figure><h2 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// include 用来指定哪些文件需要被编译, exclude 相反</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/**/*.ts&quot;</span><span class="punctuation">,</span> <span class="comment">// 表示src目录下的所有目录里的所有ts文件</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span><span class="punctuation">,</span>  <span class="comment">// 表示排除name目录下的所有文件</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// compilerOptions 表示编译器的选项,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span> <span class="comment">// 用来指定编译后的JS代码的目标版本，默认为ES3</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定编译后的JS代码的模块化规范</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定编译后文件的输出目录</span></span><br><span class="line">    <span class="attr">&quot;outfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/test.js&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定编译后文件的输出文件名并将文件合为一个文件</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;dom&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 指定项目中使用的库，一般不需要手动指定</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 是否允许编译JS文件，默认为false</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 是否检查JS文件的类型，默认为false</span></span><br><span class="line">        <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 编译后是否移除注释</span></span><br><span class="line">        <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 编译后是否生成 .js 文件</span></span><br><span class="line">    <span class="attr">&quot;noEmitOnError&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 编译出错时是否生成.js 文件</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 是否启用所有严格类型检查选项</span></span><br><span class="line">    <span class="comment">// 是否始终启用严格模式, 默认为false，如果为true，则会在生成文件的顶部添加&quot;use strict&quot;</span></span><br><span class="line">    <span class="comment">// 若文件使用了ES6的模块语法，js文件会自动进入严格模式</span></span><br><span class="line">    <span class="attr">&quot;alwaysStrict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">    <span class="attr">&quot;noImplicitThis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 不允许隐式的this类型</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite</title>
      <link href="/2025/05/29/Vite/"/>
      <url>/2025/05/29/Vite/</url>
      
        <content type="html"><![CDATA[<h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><p>​与<strong>webpack</strong>相同，<strong>Vite</strong>也是前端的构建工具。</p><h2 id="与webpack的不同"><a href="#与webpack的不同" class="headerlink" title="与webpack的不同"></a>与webpack的不同</h2><ul><li>开发时使用<strong>ESM</strong>的方式来运行项目，而不对代码进行打包。</li><li>生产时使用<strong>Rollup</strong>打包方式</li><li>可自动处理常见静态资源，无需像webpack一样配置loader。</li><li>配置简单，开箱即用，无需手动配置。</li></ul><h2 id="Plugins-插件"><a href="#Plugins-插件" class="headerlink" title="Plugins(插件)"></a>Plugins(插件)</h2><p>​Vite也可使用<strong>plugins</strong>，使用方法与webpack类似。</p><p>​配置文件格式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>; <span class="comment">// 可有可无，若不添加则写为 export default&#123;&#125;</span></span><br><span class="line"><span class="comment">// 使用es6的模块化来暴露文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​如要使传统浏览器支持可使用<code>@vitejs/plugin-legacy</code>：</p><p>​安装：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add -D @vitejs/plugin-legacy</span><br></pre></td></tr></table></figure><p>​使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> legacy <span class="keyword">from</span><span class="string">`@vitejs/plugin-legacy`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">legacy</span>(&#123;</span><br><span class="line">      <span class="attr">targets</span>:[<span class="string">&#x27;defaults&#x27;</span>,<span class="string">&quot;ie 11&quot;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="启动速度快"><a href="#启动速度快" class="headerlink" title="启动速度快"></a>启动速度快</h3><ul><li><strong>Vite</strong>：使用<strong>ESM</strong>功能，启动时无需打包。</li><li><strong>Webpack</strong>：启动时需重新构建整个模块依赖图，即使是微小变动也需要重新打包。</li></ul><h3 id="高效能热更新"><a href="#高效能热更新" class="headerlink" title="高效能热更新"></a>高效能热更新</h3><ul><li><strong>Vite</strong>：使用模块级热更新，仅更新被修改的模块。</li><li><strong>Webpack</strong>：每次修改都会触发重打包。</li></ul><h3 id="原生ESM支持"><a href="#原生ESM支持" class="headerlink" title="原生ESM支持"></a>原生ESM支持</h3><ul><li>浏览器原生ESM是未来主流，Vite便基于此设计。</li></ul><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul><li>作为新兴构建工具，插件生态不如webpack丰富。</li><li>对老旧浏览器支持不佳。</li><li>不适合高度定制化构建流程的大型项目。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2025/05/28/webpack/"/>
      <url>/2025/05/28/webpack/</url>
      
        <content type="html"><![CDATA[<p>​<strong>webpack</strong>是一个现代JS应用的一个<strong>模块打包器</strong>，作用为将所有资源（JS，css，图片等）打包为多个静态文件。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>​写在webpack.config.js中，格式为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Entry-入口-Output-出口"><a href="#Entry-入口-Output-出口" class="headerlink" title="Entry(入口)  Output(出口)"></a>Entry(入口)  Output(出口)</h3><p>​入口文件与出口文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>, <span class="comment">// 入口文件路径</span></span><br><span class="line">  <span class="comment">// 出口文件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>, <span class="comment">// 出口文件名</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">// 出口文件路径,必须绝对路径</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 每次构建是否清除path目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Mode-模式"><a href="#Mode-模式" class="headerlink" title="Mode(模式)"></a>Mode(模式)</h3><p>​用于设置编译模式，可选  “production”,”development”,”none”</p><ul><li>production：生产模式，开启代码压缩，如：删除未用到的代码；</li><li>development：开发模式，保留注释，不压缩代码。</li></ul><h3 id="Loaders-加载器"><a href="#Loaders-加载器" class="headerlink" title="Loaders(加载器)"></a>Loaders(加载器)</h3><p>​原生webpack只能打包JS与JSON代码，因此要打包其他资源需要对应的<strong>Loader</strong>（或资源模块Asset Moudules）。</p><p>​如要解析css文件就需要style-loader与css-loader：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>, <span class="comment">// 指定哪些文件需要被处理，形式为正则表达式</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>], <span class="comment">// 使用哪些loader进行处理,执行顺序为从后往前执行</span></span><br><span class="line">        <span class="comment">// css-loader只负责将css文件转为js，style-loader处理css文件并插入到html中</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Plugins-插件"><a href="#Plugins-插件" class="headerlink" title="Plugins(插件)"></a>Plugins(插件)</h3><p>​不对代码进行处理，但会拓展一些功能，在生命周期中注入或修改行为。</p><p>​如使用<strong>HtmlWebpackPlugin</strong>插件在构建时根据模版生成html并自动注入打包资源：</p><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure></li><li><p>在配置中引入并实例化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="comment">// 引入html-webpack-plugin插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HTMLPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;test&#x27;</span>, <span class="comment">// 配置生成html文件的标题</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span> <span class="comment">// 配置生成html文件的模板</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>, <span class="comment">// 配置生成html文件的名称</span></span><br><span class="line">      <span class="attr">inject</span>: <span class="string">&#x27;body&#x27;</span>, <span class="comment">// 配置html文件插入的位置,放在&lt;/body&gt;前</span></span><br><span class="line">      <span class="attr">minify</span>: <span class="literal">true</span> <span class="comment">// 配置html文件的压缩,打包时压缩html</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Asset-Modules-资源模块"><a href="#Asset-Modules-资源模块" class="headerlink" title="Asset Modules(资源模块)"></a>Asset Modules(资源模块)</h3><p>​<strong>Asset Modules</strong> 是从 <strong>Webpack 5</strong> 开始引入的一种 <strong>新的资源模块类型</strong>，用于代替旧版中通过 <code>file-loader</code>、<code>url-loader</code> 和 <code>raw-loader</code> 等处理静态资源的方式。让我们在不额外安装loader的情况下即可处理一些静态资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jpg,png)$/i</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Devtool"><a href="#Devtool" class="headerlink" title="Devtool*"></a>Devtool*</h3><p>​用来控制如何生成**Source Map(源码映射)**，安装source-map，使源码在浏览器的源代码中可见并可调试。</p><p>​不同的devtool模式，其构建速度、打包体积和映射精度各不相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NodePolyfillPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;node-polyfill-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;inline-source-map&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP的三次握手与四次挥手</title>
      <link href="/2025/05/23/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2025/05/23/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、三次握手"><a href="#一、三次握手" class="headerlink" title="一、三次握手"></a>一、三次握手</h2><h3 id="第一次：SYN（同步请求）"><a href="#第一次：SYN（同步请求）" class="headerlink" title="第一次：SYN（同步请求）"></a>第一次：SYN（同步请求）</h3><p>​·  客户端发送带有SYN标志位（SYN&#x3D;1）的报文，并随机生成一个初始序列号。</p><p>​·  告知服务器希望建立连接，并提供初始序列号用于后续数据顺序校验。</p><h3 id="第二次：SYN-ACK（同步确认）"><a href="#第二次：SYN-ACK（同步确认）" class="headerlink" title="第二次：SYN-ACK（同步确认）"></a>第二次：SYN-ACK（同步确认）</h3><p>​·  服务器收到SYN报文后，记录客户端的初始序列号（ISN_C），回复SYN-ACK报文（SYN&#x3D;1,ACK&#x3D;1）。</p><p>​·  SYN-ACK报文包含自己的初始序列号（ISN_S）和确认号（ACK&#x3D;ISN_C+1）.</p><p>​·  表示已收到客户端的SYN，确认客户端的连接请求，同时声明自身的初始序列号。</p><h3 id="第三次：ACK（最终确认）"><a href="#第三次：ACK（最终确认）" class="headerlink" title="第三次：ACK（最终确认）"></a>第三次：ACK（最终确认）</h3><p>​·  客户端收到SYN-ACK报文后发送ACK报文（ACK&#x3D;1），确认号为ISN_S+1。</p><p>​·  客户端确认服务器的响应，双方确认连接可靠。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>​·  交换初始序列号确保数据按需传输；</p><p>​·  验证双方均具备发送与接受信息的能力，确保双向通信。</p><h3 id="为何需要三次？"><a href="#为何需要三次？" class="headerlink" title="为何需要三次？"></a>为何需要三次？</h3><p>​<strong>两次握手：</strong>若在第二次握手后直接分配资源，但客户端未收到SYN-ACK或未响应ACK，服务器资源会被长期占用。</p><p>​<strong>四次握手：</strong>三次已经足够实现功能，第四次交互只会增加延迟。</p><h2 id="二、四次握手"><a href="#二、四次握手" class="headerlink" title="二、四次握手"></a>二、四次握手</h2><h3 id="第一次：FIN"><a href="#第一次：FIN" class="headerlink" title="第一次：FIN"></a>第一次：FIN</h3><p>​·  <strong>客户端</strong>发送FIN报文（FIN&#x3D;1），序列号为seq&#x3D;u，进入FIN_WAIT_1状态，表示不再发送数据，但可接收数据。</p><h3 id="第二次：ACK"><a href="#第二次：ACK" class="headerlink" title="第二次：ACK"></a>第二次：ACK</h3><p>​·  <strong>服务器</strong>收到FIN后，回复ACK报文（ACK&#x3D;1），确认号ack&#x3D;u+1，进入CLOSE_WAIT状态，此时：</p><p>​·  客户端到服务器的连接关闭（单项关闭）；</p><p>​·  服务器可能继续发送未完成的数据。</p><p>​·  客户端收到ACK报文后进入FIN_WAIT_2状态，等待服务器的FIN报文。</p><h3 id="第三次：FIN"><a href="#第三次：FIN" class="headerlink" title="第三次：FIN"></a>第三次：FIN</h3><p>​·  <strong>服务端</strong>处理完数据后发送FIN报文（FIN&#x3D;1,ACK&#x3D;1），序列号seq&#x3D;v，确认号为ack&#x3D;u+1，进入LAST_ACK状态，表示准备关闭连接。</p><h3 id="第四次：ACK"><a href="#第四次：ACK" class="headerlink" title="第四次：ACK"></a>第四次：ACK</h3><p>​·  <strong>客户端</strong>收到FIN后，回复ACK报文（ACK&#x3D;1），确认号ack&#x3D;v+1，进入TIME_WAIT状态，等待一段时间后关闭连接。</p><p>​·  <strong>服务器</strong>收到ACK后立即关闭连接。</p><h3 id="TIME-WAIT状态的作用"><a href="#TIME-WAIT状态的作用" class="headerlink" title="TIME_WAIT状态的作用"></a>TIME_WAIT状态的作用</h3><p>​·  确保最后一个ACK到达被动关闭方。若ACK丢失，被动方会重传FIN，主动方需重新响应。</p><p>​·  防止旧连接的报文干涉新连接。</p><h3 id="为何需要四次挥手"><a href="#为何需要四次挥手" class="headerlink" title="为何需要四次挥手"></a>为何需要四次挥手</h3><p>​TCP每个方向需独立关闭。被动方肯可能在发送ACK后仍有数据发送，因此需将ACK与FIN分开发送，导致四次交互。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从输入URL到出现页面</title>
      <link href="/2025/05/23/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E5%87%BA%E7%8E%B0%E9%A1%B5%E9%9D%A2/"/>
      <url>/2025/05/23/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E5%87%BA%E7%8E%B0%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、解析URL"><a href="#一、解析URL" class="headerlink" title="一、解析URL"></a>一、解析URL</h2><p>​·  浏览器解析输入的URL，检查协议、域名、端口和路径。</p><p>​·  若是非完整URL（如输入baidu.com），浏览器会尝试补全（自动添加https:&#x2F;&#x2F;）。</p><h2 id="二、检查缓存"><a href="#二、检查缓存" class="headerlink" title="二、检查缓存"></a>二、检查缓存</h2><p>​·  浏览器检查HSTS列表，若域名在列表中，自动将HTTP请求升级成HTTPS。</p><p>​·  查看本地缓存是否有该资源的缓存副本，若有效则直接使用。</p><h2 id="三、DNS解析"><a href="#三、DNS解析" class="headerlink" title="三、DNS解析"></a>三、DNS解析</h2><p>​·  每个网址都有对应的ip地址，ip地址有数字组成，不便于记忆，将url地址解析为ip地址的过程就是<strong>DNS解析</strong>。</p><p>​·  DNS就是一个记录着url与其对应的ip地址的数据库。</p><p>​·  将域名转换为ip地址：</p><p>​1.浏览器缓存–&gt;系统缓存（hosts文件）–&gt;路由器缓存–&gt;ISP的DNS服务器。</p><p>​2.若未命中缓存，DNS服务器通过递归查询（如根域名服务器–&gt;顶级域名服务器–&gt;权威域名服务器）。</p><h2 id="四、建立TCP连接"><a href="#四、建立TCP连接" class="headerlink" title="四、建立TCP连接"></a>四、建立TCP连接</h2><p>​·  通过<a href="/2025/05/23/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/">三次握手</a>建立连接</p><p>​·  如果是HTTPS，还需进行TLS握手：</p><p>​1.协商加密套件；</p><p>​2.服务器发送证书（由CA机构签发，验证身份）；</p><p>​3.生成会话秘钥（Session Key）,后续通信加密。</p><h2 id="五、发送HTTP请求"><a href="#五、发送HTTP请求" class="headerlink" title="五、发送HTTP请求"></a>五、发送HTTP请求</h2><p>​·  浏览器发送HTTP请求：</p><p>​·  请求行（&lt;请求方式&gt;&lt;请求URL&gt;&lt;HTTP版本&gt;）</p><p>​·  请求头（如User-Agent、Accept、Cookie）</p><p>​·  请求体（如POST方法的表单数据）</p><p>​·  如果是HTTPS，数据会被TLS加密。</p><h2 id="六、服务器处理请求"><a href="#六、服务器处理请求" class="headerlink" title="六、服务器处理请求"></a>六、服务器处理请求</h2><p>​·  服务器接收请求</p><p>​·  生成响应</p><h2 id="七、接受响应并解析"><a href="#七、接受响应并解析" class="headerlink" title="七、接受响应并解析"></a>七、接受响应并解析</h2><p>​·  浏览器接收响应：</p><p>​·  状态码（2xx成功、3xx重定向、4xx客户端错误、5xx服务端错误）</p><p>​·  响应头（Content-Type、Cache-Control、Set-Cookie等）</p><p>​·  响应体（HTML、CSS、JS等）</p><p>​·  解析HTML</p><h2 id="八、加载子资源"><a href="#八、加载子资源" class="headerlink" title="八、加载子资源"></a>八、加载子资源</h2><p>​·  解析过程发现图片、CSS、JS等资源时，重新触发HTTP请求（可能复用TCP连接）</p><p>​·  现代浏览器会通过预加载扫描器提前下载资源</p><h2 id="九、渲染页面"><a href="#九、渲染页面" class="headerlink" title="九、渲染页面"></a>九、渲染页面</h2><p>​· 布局，绘制，合成</p><h2 id="十、连接关闭"><a href="#十、连接关闭" class="headerlink" title="十、连接关闭"></a>十、连接关闭</h2><p>​·  通过<a href="/2025/05/23/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/">TCP的四次挥手</a>关闭连接</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2025/05/20/%E9%97%AD%E5%8C%85/"/>
      <url>/2025/05/20/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>​当内部函数引用了外部函数的变量，即使外部函数执行完毕，其作用域也不会被销毁，而是被内部函数保留。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>​·   允许函数访问并记住其定义时的词法作用域。</p><p>​·   在定义时确定作用域，而非执行时，内部函数可以访问外部函数的变量、参数和函数。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(++count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();  <span class="comment">// 输出1</span></span><br><span class="line"><span class="title function_">outer</span>();  <span class="comment">// 输出2</span></span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>​1.数据封装私有化：隐藏变量，只通过特定变量接口暴露操作；</p><p>​2.保留函数状态：可用于 计数器、缓存、防抖&#x2F;节流函数；</p><p>​3.模块化开发：结合立即执行函数可以隔离作用域，避免全局污染。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>​有内存泄漏风险：及时解除闭包引用，obj&#x3D;null。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/05/18/hello-world/"/>
      <url>/2025/05/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<ul class=list>    <li>        <a href="https://qinchuid.github.io/">            <span class=img><img  src="/img/xiaodi.jpg"></span>            <div class="name">琴吹滴</div>            <div class="jieshao">不熟</div>        </a>    </li>    <li>        <a href="https://benksih.github.io">            <span class=img><img  src="/img/benksih.jpg"></span>            <div class="name">Benksih</div>            <div class="jieshao">不认识</div>        </a>    </li>    </ul><style>    .list{        list-style: none;    }    .list li{        height: 210px;        width: 140px;        float: left;    }    .list li a:hover{        transform: scale(1.1);        transition: all .3s;        box-shadow: 0 0 15px #00c4b6;        border-radius: 10px;        text-decoration: none;    }    .list li a{        display: flex;        flex-direction: column;        justify-content: center;        align-items: center;                flex-wrap: wrap;    }    .list img{        width: 100px;        height: 100px;    }    .list li .img{        width: 100px;        height: 100px;        border-radius: 50%;        overflow: hidden;    }    .list li .name{        font-size: 18px;        font-weight: 700;        color: rgb(0, 0, 0);    }    .list li .jieshao{        font-size: 14px;        color: rgba(0, 0, 0,.5);    }</style>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>列表</title>
      <link href="/list/index.html"/>
      <url>/list/index.html</url>
      
        <content type="html"><![CDATA[<p>666</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
